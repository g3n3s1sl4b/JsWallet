name: CI to ECR
on:
  push:
    branches: [master]

jobs:
  e2e-tests-local:
    runs-on: macos-internal2
    defaults:
      run:
        working-directory: ./e2e
    steps:
      - name: checkout JsWallet
        uses: actions/checkout@v2
      - name: checkout web3t
        uses: actions/checkout@v2
        with:
          repository: velas/web3t
          path: .compiled-ssr/web3t
          ref: master
      - name: install web3t modules
        working-directory: .compiled-ssr/web3t
        run: npm i
      - name: copy web3 side by side to wallet
        working-directory: ../
        run: rm -rf JsWallet/.compiled-ssr/web3t/.git/objects/ && mkdir -p web3t/ && cp -pr JsWallet/.compiled-ssr/web3t/ web3t/
      - name: delete wallet build cache
        working-directory: ./
        run: rm -rf ./.compiled
      # sleep required for wallet start
      - name: run wallet
        working-directory: ./
        run: |
          npm run wallet-start &
          sleep 16 &&
          echo '- - - - - Wallet started - - - - -'
      - name: install modules required for testrun
        run: npm ci
      - name: clean previous test results
        run: rm -rf ./test-results/
      - name: blockchain health check
        run: CI=true LOG_LEVEL=info npm run blockchain-health-check
      - name: run tests-unstable
        run: CI=true LOG_LEVEL=info npm run test-unstable
      - name: run tests-stable
        run: CI=true LOG_LEVEL=info npm run test-stable
      - name: create html report from junit
        if: always()
        run: junit2html test-results/test-results.xml test-results/report.html
      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            e2e/test-results/
  docker-build-push:
    # Name the Job
    name: Build and push
    runs-on: build
    outputs:
      repository: ${{ steps.build.outputs.repository }}
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        id: checkout
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to AWS ECR
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: velas-wallet
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --no-cache .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=repository::$ECR_REPOSITORY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
  deploy:
    name: Deploy via Helmfile
    runs-on: deploy
    needs: docker-build-push
    steps:
      - name: Configure AWS credentials
        id: checkout
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.6.0
        with:
          helmfile-version: "v0.131.0"
      - name: Check out velas-infra
        uses: actions/checkout@master
        with:
          repository: velas/velas-infra
          ssh-key: ${{ secrets.INFRA_SSH_KEY }}
      - name: Deploy via helmfile
        id: deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ needs.docker-build-push.outputs.repository }}
          IMAGE_TAG: ${{ needs.docker-build-push.outputs.image_tag }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          if [ `helm plugin list|grep diff|wc -l` -eq '0' ]; then helm plugin install https://github.com/databus23/helm-diff ; fi
          mkdir -p ~/.kube && echo $KUBE_CONFIG_DATA|base64 --decode > ~/.kube/config
          cd deploy
          helmfile -e default -l namespace=default,name=velas-wallet apply  --set image.tag=$IMAGE_TAG,image.repository=$ECR_REGISTRY/$ECR_REPOSITORY --skip-deps
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [docker-build-push, deploy]
    defaults:
      run:
        working-directory: ./e2e
    steps:
      - uses: actions/checkout@v2
      - name: install modules required for testrun
        run: npm i
      - name: install required browsers
        run: npx playwright install chrome
      - name: clean previous test results
        run: rm -rf ./test-results/
      - name: blockchain health check
        run: CI=true LOG_LEVEL=info ENVIRONMENT=prod npm run blockchain-health-check
      - name: run tests testnet
        run: CI=true LOG_LEVEL=debug ENVIRONMENT=prod npm run test-testnet
      - name: run tests-unstable
        run: CI=true LOG_LEVEL=info ENVIRONMENT=prod npm run test-unstable
      - name: run tests-stable
        run: CI=true LOG_LEVEL=info ENVIRONMENT=prod npm run test-stable
      - name: upload artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            e2e/test-results/
